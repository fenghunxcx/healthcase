<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <!--授权-->
    <!--配置资源不拦截-->
    <security:http pattern="/favicon.ico" security="none"></security:http>
    <!--
        auto-config： 是否使用security自带配置
        use-expressions： 是否使用security的表达式
            false不使用表达式 ： ROLE_ADMIN
            true使用表达式：hasRole('ROLE_ADMIN')
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--配置自定义（登录相关的）页面-->
        <!--
            login-page:登录页面
            login-processing-url: 登录的请求路径
            default-target-url: 默认的目标路径， 认证成功后默认会跳转的页面
            authentication-success-forward-url: 认证成功后跳转的页面， 配置时 前缀必须是 /
            authentication-failure-url: 认证失败后跳转的页面， 配置时 前缀必须是 /
            password-parameter: 登录表单密码参数 , 默认密码识别password
            username-parameter： 登录表单用户参数， 默认用户名识别username
        -->
        <security:form-login
                login-page="http://localhost:83/login.html"
                login-processing-url="/user/login.do"
                authentication-success-forward-url="/user/loginSuccess.do"
                authentication-failure-url="/user/loginFail.do" ></security:form-login>
        <!--
           logout：退出登录
           logout-url：退出登录操作对应的请求路径
           logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="http://localhost:83/login.html"
                         invalidate-session="true"/>

        <!--关闭跨站请求伪造-->
        <security:csrf disabled="true"></security:csrf>

    </security:http>

    <bean id="userDetailsService" class="com.itheima.security.SecurityConfigUserService"></bean>

    <!--认证管理器:提供认证信息-->
    <security:authentication-manager>
        <!--认证信息的提供者-->
        <!--
         user-service-ref: 管理一个用户详情服务对象，必须是UserDetailsService接口的实现类
        -->
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--开启注解方式权限控制-->
    <!--
        @PreAuthorize, @PostAuthorize 注解生效
    -->
    <security:global-method-security pre-post-annotations="enabled" />

    <!--安全框架中的默认加密工具类-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

</beans>